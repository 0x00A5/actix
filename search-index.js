var searchIndex = JSON.parse('{\
"actix":{"doc":"Actix is an actor framework.","i":[[23,"main","actix","Marks async function to be executed by Actix system.",null,null],[23,"test","","Marks async test function to be executed by Actix system.",null,null],[24,"Message","","",null,null],[24,"MessageResponse","","",null,null],[5,"spawn","","Spawns a future on the current thread.",null,[[],["joinhandle",3]]],[3,"Arbiter","","An Arbiter represents a thread that provides an…",null,null],[3,"System","","A manager for a per-thread distributed async runtime.",null,null],[3,"SystemRunner","","Runner that keeps a [System]\'s event loop alive until stop…",null,null],[3,"SpawnHandle","","A handle to a spawned future.",null,null],[3,"Addr","","The address of an actor.",null,null],[3,"Recipient","","The `Recipient` type allows to send one specific message…",null,null],[3,"WeakAddr","","A weakly referenced counterpart to `Addr<A>`.",null,null],[3,"WeakRecipient","","A weakly referenced counterpart to `Recipient<M>`",null,null],[3,"Context","","An actor execution context.",null,null],[3,"ActorResponse","","A helper type for representing different types of message…",null,null],[3,"AtomicResponse","","A specialized actor future holder for atomic asynchronous…",null,null],[3,"MessageResult","","A helper type that implements the `MessageResponse` trait.",null,null],[12,"0","","",0,null],[3,"Response","","Helper type for representing different type of message…",null,null],[3,"Supervisor","","Actor supervisor",null,null],[4,"ActorState","","Actor execution state",null,null],[13,"Started","","Actor is started.",1,null],[13,"Running","","Actor is running.",1,null],[13,"Stopping","","Actor is stopping.",1,null],[13,"Stopped","","Actor is stopped.",1,null],[4,"Running","","",null,null],[13,"Stop","","",2,null],[13,"Continue","","",2,null],[4,"MailboxError","","The errors that can occur during the message delivery…",null,null],[13,"Closed","","",3,null],[13,"Timeout","","",3,null],[5,"run","","Starts the system and executes the supplied future.",null,[[],["result",6]]],[11,"alive","","Indicates whether the actor is alive.",1,[[]]],[11,"stopping","","Indicates whether the actor is stopped or stopping.",1,[[]]],[11,"next","","Gets the next handle.",4,[[],["spawnhandle",3]]],[11,"with_receiver","","",5,[[["addressreceiver",3]]]],[11,"run","","",5,[[],["addr",3]]],[11,"into_future","","",5,[[],["contextfut",3]]],[11,"handle","","Returns a handle to the running future.",5,[[],["spawnhandle",3]]],[11,"set_mailbox_capacity","","Sets the mailbox capacity.",5,[[]]],[11,"connected","","Returns whether any addresses are still connected.",5,[[]]],[11,"new","","",6,[[["responseactfuture",6]]]],[11,"fut","","Creates an asynchronous response.",7,[[]]],[11,"reply","","Creates a response.",7,[[]]],[11,"reply","","Creates a response.",8,[[]]],[11,"async","","Creates an asynchronous response.",8,[[]]],[11,"start","","Start new supervised actor in current tokio runtime.",9,[[],["addr",3]]],[11,"start_in_arbiter","","Start new supervised actor in arbiter\'s thread.",9,[[["arbiterhandle",3]],["addr",3]]],[11,"new","","",10,[[["addresssender",3]],["addr",3]]],[11,"connected","","Returns whether the actor is still alive.",10,[[]]],[11,"do_send","","Sends a message unconditionally, ignoring any potential…",10,[[]]],[11,"try_send","","Tries to send a message.",10,[[],[["result",4],["senderror",4]]]],[11,"send","","Sends an asynchronous message and waits for a response.",10,[[],["request",3]]],[11,"recipient","","Returns the `Recipient` for a specific message type.",10,[[],["recipient",3]]],[11,"downgrade","","Returns a downgraded `WeakAddr`.",10,[[],["weakaddr",3]]],[11,"upgrade","","Attempts to upgrade the `WeakAddr<A>` pointer to an…",11,[[],[["addr",3],["option",4]]]],[11,"recipient","","",11,[[],["weakrecipient",3]]],[11,"do_send","","Sends a message.",12,[[],[["result",4],["senderror",4]]]],[11,"try_send","","Attempts to send a message.",12,[[],[["result",4],["senderror",4]]]],[11,"send","","Sends a message and asynchronously wait for a response.",12,[[],["recipientrequest",3]]],[11,"connected","","",12,[[]]],[11,"upgrade","","Attempts to upgrade the `WeakRecipient<M>` pointer to an…",13,[[],[["option",4],["recipient",3]]]],[0,"actors","","Helper actors",null,null],[0,"mocker","actix::actors","Mocking utility actor.",null,null],[3,"Mocker","actix::actors::mocker","This actor is able to wrap another actor and accept all…",null,null],[11,"mock","","",14,[[["fnmut",8],["box",3]],["mocker",3]]],[0,"resolver","actix::actors","DNS resolver and connector utility actor",null,null],[3,"Resolve","actix::actors::resolver","",null,null],[12,"name","","",15,null],[12,"port","","",15,null],[3,"Connect","","",null,null],[12,"name","","",16,null],[12,"port","","",16,null],[12,"timeout","","",16,null],[3,"ConnectAddr","","",null,null],[12,"0","","",17,null],[3,"Resolver","","",null,null],[3,"TcpConnector","","A TCP stream connector.",null,null],[4,"ResolverError","","",null,null],[13,"Resolver","","Failed to resolve the hostname",18,null],[13,"InvalidInput","","Address is invalid",18,null],[13,"Timeout","","Connecting took too long",18,null],[13,"IoError","","Connection io error",18,null],[6,"Connector","","",null,null],[6,"ConnectorError","","",null,null],[11,"host","","",15,[[["asref",8]],["resolve",3]]],[11,"host_and_port","","",15,[[["asref",8]],["resolve",3]]],[11,"host","","",16,[[["asref",8]],["connect",3]]],[11,"host_and_port","","",16,[[["asref",8]],["connect",3]]],[11,"timeout","","Set connect timeout",16,[[["duration",3]],["connect",3]]],[11,"new","","",19,[[["resolverconfig",3],["resolveropts",3]],["resolver",3]]],[11,"new","","",20,[[["vecdeque",3],["socketaddr",4]],["tcpconnector",3]]],[11,"with_timeout","","",20,[[["vecdeque",3],["socketaddr",4],["duration",3]],["tcpconnector",3]]],[0,"clock","actix","Utilities for tracking time.",null,null],[3,"Instant","actix::clock","A measurement of a monotonically nondecreasing clock.…",null,null],[5,"interval","","Creates new `Interval` that yields with interval of…",null,[[["duration",3]],["interval",3]]],[5,"interval_at","","Creates new `Interval` that yields with interval of…",null,[[["instant",3],["duration",3]],["interval",3]]],[3,"Interval","","Interval returned by `interval` and `interval_at`.",null,null],[5,"sleep","","Waits until `duration` has elapsed.",null,[[["duration",3]],["sleep",3]]],[5,"sleep_until","","Waits until `deadline` is reached.",null,[[["instant",3]],["sleep",3]]],[3,"Sleep","","Future returned by `sleep` and `sleep_until`.",null,null],[5,"timeout","","Require a `Future` to complete before the specified…",null,[[["duration",3]],["timeout",3]]],[3,"Timeout","","Future returned by `timeout` and `timeout_at`.",null,null],[0,"fut","actix","Custom `Future` implementation with `Actix` support",null,null],[3,"Finish","actix::fut","A combinator used to convert a stream into a future; the…",null,null],[3,"Map","","Future for the `map` combinator, changing the type of a…",null,null],[3,"Ready","","Future for the `ready` function.",null,null],[3,"FutureResult","","A future representing a value that is immediately ready.",null,null],[3,"StreamFinish","","A combinator used to convert stream into a future, future…",null,null],[3,"StreamFold","","A future used to collect all the results of a stream into…",null,null],[3,"StreamMap","","A stream combinator which will change the type of a stream…",null,null],[3,"StreamThen","","A stream combinator which chains a computation onto each…",null,null],[3,"StreamTimeout","","Future for the `timeout` combinator, interrupts…",null,null],[3,"Then","","Future for the `then` combinator, chaining computations on…",null,null],[3,"Timeout","","Future for the `timeout` combinator, interrupts…",null,null],[3,"FutureWrap","","",null,null],[3,"StreamWrap","","",null,null],[4,"Either","","Combines two different futures yielding the same item and…",null,null],[13,"Left","","First branch of the type",21,null],[12,"left","actix::fut::Either","",22,null],[13,"Right","actix::fut","Second branch of the type",21,null],[12,"right","actix::fut::Either","",23,null],[5,"ready","actix::fut","Create a future that is immediately ready with a value.",null,[[],["ready",3]]],[5,"err","","Creates a \\\"leaf future\\\" from an immediate value of a…",null,[[],["futureresult",3]]],[5,"ok","","Creates a \\\"leaf future\\\" from an immediate value of a…",null,[[],["futureresult",3]]],[5,"result","","Creates a new \\\"leaf future\\\" which will resolve with the…",null,[[["result",4]],["futureresult",3]]],[5,"wrap_future","","Converts normal future into `ActorFuture`, allowing its…",null,[[],["futurewrap",3]]],[5,"wrap_stream","","Converts normal stream into `ActorStream`",null,[[],["streamwrap",3]]],[11,"left","","construct first branch of the type",21,[[]]],[11,"right","","construct second branch of the type",21,[[]]],[11,"factor_left","","Factor out a homogeneous type from an either of pairs.",21,[[]]],[11,"factor_right","","Factor out a homogeneous type from an either of pairs.",21,[[]]],[11,"into_inner","","Extract the value of an either over two equivalent types.",21,[[]]],[11,"new","","",24,[[],["finish",3]]],[8,"ActorFuture","","Trait for types which are a placeholder of a value that…",null,null],[16,"Output","","The type of value that this future will resolved with if…",25,null],[16,"Actor","","The actor within which this future runs",25,null],[10,"poll","","",25,[[["context",3],["pin",3]],["poll",4]]],[11,"map","","Map this future\'s result to a different type, returning a…",25,[[],["map",3]]],[11,"then","","Chain on a computation for when a future finished, passing…",25,[[],["then",3]]],[11,"timeout","","Add timeout to futures chain.",25,[[["duration",3]],["timeout",3]]],[8,"ActorStream","","A stream of values, not all of which may have been…",null,null],[16,"Item","","The type of item this stream will yield on success.",26,null],[16,"Actor","","The actor within which this stream runs.",26,null],[10,"poll_next","","",26,[[["context",3],["pin",3]],[["poll",4],["option",4]]]],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",26,[[],["streammap",3]]],[11,"then","","Chain on a computation for when a value is ready, passing…",26,[[],["streamthen",3]]],[11,"fold","","Execute an accumulating computation over a stream,…",26,[[],["streamfold",3]]],[11,"timeout","","Add timeout to stream.",26,[[["duration",3]],["streamtimeout",3]]],[11,"finish","","Converts a stream to a future that resolves when stream…",26,[[],["streamfinish",3]]],[8,"IntoActorFuture","","Class of types which can be converted into an actor future.",null,null],[16,"Future","","The future that this type can be converted into.",27,null],[16,"Output","","The item that the future may resolve with.",27,null],[16,"Actor","","The actor within which this future runs",27,null],[10,"into_future","","Consumes this object and produces a future.",27,[[]]],[8,"WrapFuture","","Helper trait that allows conversion of normal future into…",null,null],[16,"Future","","The future that this type can be converted into.",28,null],[16,"Output","","The item that the future may resolve with.",28,null],[10,"into_actor","","Convert normal future to a ActorFuture",28,[[]]],[8,"WrapStream","","Helper trait that allows conversion of normal stream into…",null,null],[16,"Stream","","The stream that this type can be converted into.",29,null],[16,"Item","","The item that the future may resolve with.",29,null],[10,"into_actor","","Convert normal stream to a ActorStream",29,[[]]],[0,"io","actix","",null,null],[3,"Writer","actix::io","A wrapper for `AsyncWrite` types.",null,null],[3,"FramedWrite","","A wrapper for the `AsyncWrite` and `Encoder` types. The…",null,null],[3,"SinkWrite","","A wrapper for the `Sink` type.",null,null],[8,"WriteHandler","","A helper trait for write handling.",null,null],[11,"error","","Called when the writer emits error.",30,[[],["running",4]]],[11,"finished","","Called when the writer finishes.",30,[[]]],[11,"new","","",31,[[]]],[11,"close","","Gracefully closes the sink.",31,[[]]],[11,"closed","","Checks if the sink is closed.",31,[[]]],[11,"set_buffer_capacity","","Sets the write buffer capacity.",31,[[]]],[11,"write","","Sends an item to the sink.",31,[[]]],[11,"handle","","Returns the `SpawnHandle` for this writer.",31,[[],["spawnhandle",3]]],[11,"new","","",32,[[]]],[11,"from_buffer","","",32,[[["bytesmut",3]]]],[11,"close","","Gracefully closes the sink.",32,[[]]],[11,"closed","","Checks if the sink is closed.",32,[[]]],[11,"set_buffer_capacity","","Sets the write buffer capacity.",32,[[]]],[11,"write","","Writes an item to the sink.",32,[[]]],[11,"handle","","Returns the `SpawnHandle` for this writer.",32,[[],["spawnhandle",3]]],[11,"new","","",33,[[]]],[11,"write","","Queues an item to be sent to the sink.",33,[[],["option",4]]],[11,"close","","Gracefully closes the sink.",33,[[]]],[11,"closed","","Checks if the sink is closed.",33,[[]]],[11,"handle","","Returns the `SpawnHandle` for this writer.",33,[[],["spawnhandle",3]]],[0,"registry","actix","Actors registry",null,null],[3,"Registry","actix::registry","Actors registry",null,null],[3,"SystemRegistry","","System wide actors registry",null,null],[8,"ArbiterService","","Trait defines arbiter\'s service.",null,null],[11,"start_service","","Construct and start arbiter service",34,[[],["addr",3]]],[11,"service_started","","Method is called during service initialization.",34,[[["context",3]]]],[11,"from_registry","","Get actor\'s address from arbiter registry",34,[[],["addr",3]]],[8,"SystemService","","Trait defines system\'s service.",null,null],[11,"start_service","","Construct and start system service",35,[[["arbiterhandle",3]],["addr",3]]],[11,"service_started","","Method is called during service initialization.",35,[[["context",3]]]],[11,"from_registry","","Get actor\'s address from system registry",35,[[],["addr",3]]],[11,"get","","Query registry for specific actor. Returns address of the…",36,[[],[["addr",3],["actor",8],["arbiterservice",8]]]],[11,"query","","Check if actor is in registry, if so, return its address",36,[[],[["addr",3],["option",4]]]],[11,"set","","Add new actor to the registry by address, panic if actor…",36,[[["addr",3],["actor",8],["arbiterservice",8]]]],[11,"get","","Return address of the service. If service actor is not…",37,[[],[["addr",3],["actor",8],["systemservice",8]]]],[11,"query","","Check if actor is in registry, if so, return its address",37,[[],[["addr",3],["option",4]]]],[11,"set","","Add new actor to the registry by address, panic if actor…",37,[[["addr",3],["actor",8],["systemservice",8]]]],[0,"sync","actix","Sync Actors support",null,null],[3,"SyncArbiter","actix::sync","SyncArbiter provides the resources for a single Sync Actor…",null,null],[3,"SyncContext","","Sync actor execution context. This is used instead of impl…",null,null],[11,"start","","Start a new `SyncArbiter` with specified number of worker…",38,[[],["addr",3]]],[11,"address","","",39,[[],["addr",3]]],[0,"utils","actix","",null,null],[3,"Condition","actix::utils","",null,null],[3,"TimerFunc","","An `ActorFuture` that runs a function in the actor\'s…",null,null],[3,"IntervalFunc","","An `ActorStream` that periodically runs a function in the…",null,null],[11,"wait","","",40,[[],["receiver",3]]],[11,"set","","",40,[[]]],[11,"new","","Creates a new `TimerFunc` with the given duration.",41,[[["duration",3]],["timerfunc",3]]],[11,"new","","Creates a new `IntervalFunc` with the given interval…",42,[[["duration",3]],["intervalfunc",3]]],[0,"prelude","actix","The `actix` prelude.",null,null],[3,"Arbiter","actix::prelude","An Arbiter represents a thread that provides an…",null,null],[3,"System","","A manager for a per-thread distributed async runtime.",null,null],[3,"SystemRunner","","Runner that keeps a [System]\'s event loop alive until stop…",null,null],[8,"Stream","","A stream of values produced asynchronously.",null,null],[16,"Item","","Values yielded by the stream.",43,null],[10,"poll_next","","Attempt to pull out the next value of this stream,…",43,[[["pin",3],["context",3]],[["poll",4],["option",4]]]],[11,"size_hint","","Returns the bounds on the remaining length of the stream.",43,[[]]],[8,"Future","","A future represents an asynchronous computation.",null,null],[16,"Output","","The type of value produced on completion.",44,null],[10,"poll","","Attempt to resolve the future to a final value,…",44,[[["pin",3],["context",3]],["poll",4]]],[3,"SpawnHandle","","A handle to a spawned future.",null,null],[3,"Addr","","The address of an actor.",null,null],[3,"Recipient","","The `Recipient` type allows to send one specific message…",null,null],[3,"RecipientRequest","","A `Future` which represents an asynchronous message…",null,null],[3,"Request","","A `Future` which represents an asynchronous message…",null,null],[3,"Context","","An actor execution context.",null,null],[3,"ActorResponse","","A helper type for representing different types of message…",null,null],[3,"AtomicResponse","","A specialized actor future holder for atomic asynchronous…",null,null],[3,"MessageResult","","A helper type that implements the `MessageResponse` trait.",null,null],[12,"0","","",0,null],[3,"Response","","Helper type for representing different type of message…",null,null],[3,"Supervisor","","Actor supervisor",null,null],[4,"ActorState","","Actor execution state",null,null],[13,"Started","","Actor is started.",1,null],[13,"Running","","Actor is running.",1,null],[13,"Stopping","","Actor is stopping.",1,null],[13,"Stopped","","Actor is stopped.",1,null],[4,"Running","","",null,null],[13,"Stop","","",2,null],[13,"Continue","","",2,null],[4,"MailboxError","","The errors that can occur during the message delivery…",null,null],[13,"Closed","","",3,null],[13,"Timeout","","",3,null],[4,"SendError","","",null,null],[13,"Full","","",45,null],[13,"Closed","","",45,null],[6,"ResponseActFuture","","A specialized actor future for asynchronous message…",null,null],[6,"ResponseFuture","","A specialized future for asynchronous message handling.",null,null],[8,"Actor","","Actors are objects which encapsulate state and behavior.",null,null],[16,"Context","","Actor execution context type",46,null],[11,"started","","Called when an actor gets polled the first time.",46,[[]]],[11,"stopping","","Called after an actor is in `Actor::Stopping` state.",46,[[],["running",4]]],[11,"stopped","","Called after an actor is stopped.",46,[[]]],[11,"start","","Start a new asynchronous actor, returning its address.",46,[[],["addr",3]]],[11,"start_default","","Construct and start a new asynchronous actor, returning…",46,[[],["addr",3]]],[11,"start_in_arbiter","","Start new actor in arbiter\'s thread.",46,[[["arbiterhandle",3]],["addr",3]]],[11,"create","","Start a new asynchronous actor given a `Context`.",46,[[],["addr",3]]],[8,"ActorContext","","Actor execution context.",null,null],[10,"stop","","Immediately stop processing incoming messages and switch…",47,[[]]],[10,"terminate","","Terminate actor execution unconditionally. This sets the…",47,[[]]],[10,"state","","Retrieve the current Actor execution state.",47,[[],["actorstate",4]]],[8,"AsyncContext","","Asynchronous execution context.",null,null],[10,"address","","Returns the address of the context.",48,[[],["addr",3]]],[10,"spawn","","Spawns a future into the context.",48,[[],["spawnhandle",3]]],[10,"wait","","Spawns a future into the context, waiting for it to resolve.",48,[[]]],[10,"waiting","","Checks if the context is paused (waiting for future…",48,[[]]],[10,"cancel_future","","Cancels a spawned future.",48,[[["spawnhandle",3]]]],[11,"add_stream","","Registers a stream with the context.",48,[[],["spawnhandle",3]]],[11,"add_message_stream","","Registers a stream with the context, ignoring errors.",48,[[]]],[11,"notify","","Sends the message `msg` to self. This bypasses the mailbox…",48,[[]]],[11,"notify_later","","Sends the message `msg` to self after a specified period…",48,[[["duration",3]],["spawnhandle",3]]],[11,"run_later","","Executes a closure after a specified period of time.",48,[[["duration",3]],["spawnhandle",3]]],[11,"run_interval","","Spawns a job to execute the given closure periodically, at…",48,[[["duration",3]],["spawnhandle",3]]],[8,"Supervised","","Actors with the ability to restart after failure.",null,null],[11,"restarting","","Called when the supervisor restarts a failed actor.",49,[[]]],[8,"ContextFutureSpawner","","Helper trait which can spawn a future into the actor\'s…",null,null],[10,"spawn","","Spawns the future into the given context.",50,[[]]],[10,"wait","","Spawns the future into the given context, waiting for it…",50,[[]]],[8,"Handler","","Describes how to handle messages of a specific type.",null,null],[16,"Result","","The type of value that this handler will return.",51,null],[10,"handle","","This method is called for every message received by this…",51,[[]]],[8,"Message","","Represent message that can be handled by an actor.",null,null],[16,"Result","","The type of value that this message will resolved with if…",52,null],[8,"StreamHandler","","Stream handler",null,null],[10,"handle","","Method is called for every message received by this Actor",53,[[]]],[11,"started","","Method is called when stream get polled first time.",53,[[]]],[11,"finished","","Method is called when stream finishes.",53,[[]]],[11,"add_stream","","This method register stream to an actor context and allows…",53,[[],["spawnhandle",3]]],[0,"dev","actix","The `actix` prelude for library developers.",null,null],[3,"Envelope","actix::dev","",null,null],[3,"RecipientRequest","","A `Future` which represents an asynchronous message…",null,null],[3,"Request","","A `Future` which represents an asynchronous message…",null,null],[3,"ContextFut","","",null,null],[3,"ContextParts","","",null,null],[3,"Mailbox","","",null,null],[0,"channel","","",null,null],[3,"AddressReceiver","actix::dev::channel","The receiving end of a channel which implements the…",null,null],[3,"AddressSender","","The transmission end of a channel which is used to send…",null,null],[5,"channel","","Creates an in-memory channel implementation of the…",null,[[]]],[8,"EnvelopeProxy","actix::dev","",null,null],[10,"handle","","handle message within new actor and context",54,[[]]],[8,"ToEnvelope","","Converter trait, packs message into a suitable envelope.",null,null],[10,"pack","","Pack message into suitable envelope",55,[[["sender",3],["option",4]],["envelope",3]]],[8,"AsyncContextParts","","",null,null],[10,"parts","","",56,[[],["contextparts",3]]],[8,"MessageResponse","","A trait which defines message responses.",null,null],[10,"handle","","",57,[[["responsechannel",8],["option",4]]]],[8,"ResponseChannel","","A trait that defines a message response channel.",null,null],[10,"is_canceled","","",58,[[]]],[10,"send","","",58,[[]]],[6,"ResponseActFuture","actix","A specialized actor future for asynchronous message…",null,null],[6,"ResponseFuture","","A specialized future for asynchronous message handling.",null,null],[8,"Actor","","Actors are objects which encapsulate state and behavior.",null,null],[16,"Context","","Actor execution context type",46,null],[11,"started","actix::prelude","Called when an actor gets polled the first time.",46,[[]]],[11,"stopping","","Called after an actor is in `Actor::Stopping` state.",46,[[],["running",4]]],[11,"stopped","","Called after an actor is stopped.",46,[[]]],[11,"start","","Start a new asynchronous actor, returning its address.",46,[[],["addr",3]]],[11,"start_default","","Construct and start a new asynchronous actor, returning…",46,[[],["addr",3]]],[11,"start_in_arbiter","","Start new actor in arbiter\'s thread.",46,[[["arbiterhandle",3]],["addr",3]]],[11,"create","","Start a new asynchronous actor given a `Context`.",46,[[],["addr",3]]],[8,"ActorContext","actix","Actor execution context.",null,null],[10,"stop","","Immediately stop processing incoming messages and switch…",47,[[]]],[10,"terminate","","Terminate actor execution unconditionally. This sets the…",47,[[]]],[10,"state","","Retrieve the current Actor execution state.",47,[[],["actorstate",4]]],[8,"AsyncContext","","Asynchronous execution context.",null,null],[10,"address","","Returns the address of the context.",48,[[],["addr",3]]],[10,"spawn","","Spawns a future into the context.",48,[[],["spawnhandle",3]]],[10,"wait","","Spawns a future into the context, waiting for it to resolve.",48,[[]]],[10,"waiting","","Checks if the context is paused (waiting for future…",48,[[]]],[10,"cancel_future","","Cancels a spawned future.",48,[[["spawnhandle",3]]]],[11,"add_stream","actix::prelude","Registers a stream with the context.",48,[[],["spawnhandle",3]]],[11,"add_message_stream","","Registers a stream with the context, ignoring errors.",48,[[]]],[11,"notify","","Sends the message `msg` to self. This bypasses the mailbox…",48,[[]]],[11,"notify_later","","Sends the message `msg` to self after a specified period…",48,[[["duration",3]],["spawnhandle",3]]],[11,"run_later","","Executes a closure after a specified period of time.",48,[[["duration",3]],["spawnhandle",3]]],[11,"run_interval","","Spawns a job to execute the given closure periodically, at…",48,[[["duration",3]],["spawnhandle",3]]],[8,"Supervised","actix","Actors with the ability to restart after failure.",null,null],[11,"restarting","actix::prelude","Called when the supervisor restarts a failed actor.",49,[[]]],[8,"Handler","actix","Describes how to handle messages of a specific type.",null,null],[16,"Result","","The type of value that this handler will return.",51,null],[10,"handle","","This method is called for every message received by this…",51,[[]]],[8,"Message","","Represent message that can be handled by an actor.",null,null],[16,"Result","","The type of value that this message will resolved with if…",52,null],[8,"StreamHandler","","Stream handler",null,null],[10,"handle","","Method is called for every message received by this Actor",53,[[]]],[11,"started","actix::prelude","Method is called when stream get polled first time.",53,[[]]],[11,"finished","","Method is called when stream finishes.",53,[[]]],[11,"add_stream","","This method register stream to an actor context and allows…",53,[[],["spawnhandle",3]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"vzip","","",59,[[]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"vzip","","",60,[[]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"vzip","","",61,[[]]],[11,"from","actix","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"into_actor","","",9,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"into_future","","",9,[[]]],[11,"vzip","","",9,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","actix::dev","",62,[[]]],[11,"into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"vzip","","",62,[[]]],[11,"into_actor","","",63,[[]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"into_future","","",63,[[]]],[11,"vzip","","",63,[[]]],[11,"from","actix::prelude","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_string","","",45,[[],["string",3]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"vzip","","",45,[[]]],[11,"from","actix::dev::channel","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"vzip","","",64,[[]]],[11,"into_actor","","",65,[[]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"vzip","","",65,[[]]],[11,"from","actix::dev","",66,[[]]],[11,"into","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"vzip","","",66,[[]]],[11,"into_actor","actix::prelude","",67,[[]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"into_future","","",67,[[]]],[11,"try_poll","","",67,[[["context",3],["pin",3]],["poll",4]]],[11,"vzip","","",67,[[]]],[11,"into_actor","","",68,[[]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"into_future","","",68,[[]]],[11,"try_poll","","",68,[[["context",3],["pin",3]],["poll",4]]],[11,"vzip","","",68,[[]]],[11,"from","actix::dev","",69,[[]]],[11,"into","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"vzip","","",69,[[]]],[11,"from","actix::actors::mocker","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","actix::actors::resolver","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"into_future","","",20,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_string","","",18,[[],["string",3]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"from","actix::clock","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"vzip","","",70,[[]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"vzip","","",71,[[]]],[11,"into_actor","","",72,[[]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"into_future","","",72,[[]]],[11,"vzip","","",72,[[]]],[11,"into_actor","","",73,[[]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"into_future","","",73,[[]]],[11,"try_poll","","",73,[[["context",3],["pin",3]],["poll",4]]],[11,"vzip","","",73,[[]]],[11,"into_actor","actix::fut","",24,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"into_future","","",24,[[]]],[11,"vzip","","",24,[[]]],[11,"into_future","","",74,[[]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"vzip","","",74,[[]]],[11,"into_future","","",75,[[]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"vzip","","",75,[[]]],[11,"into_future","","",76,[[]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"vzip","","",76,[[]]],[11,"into_future","","",77,[[]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"vzip","","",77,[[]]],[11,"into_future","","",78,[[]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"vzip","","",78,[[]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"vzip","","",79,[[]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"vzip","","",80,[[]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"vzip","","",81,[[]]],[11,"into_future","","",82,[[]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"vzip","","",82,[[]]],[11,"into_future","","",83,[[]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"vzip","","",83,[[]]],[11,"into_future","","",84,[[]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"vzip","","",84,[[]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"vzip","","",85,[[]]],[11,"into_future","","",21,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from","actix::io","",31,[[]]],[11,"into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"from","actix::registry","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"into_actor","actix::sync","",38,[[]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"into_future","","",38,[[]]],[11,"vzip","","",38,[[]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"vzip","","",39,[[]]],[11,"from","actix::utils","",40,[[]]],[11,"into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"vzip","","",40,[[]]],[11,"into_future","","",41,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"clone","actix::prelude","",60,[[],["system",3]]],[11,"fmt","","",61,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",59,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",60,[[["formatter",3]],[["error",3],["result",4]]]],[11,"hash","actix::clock","",70,[[]]],[11,"add_assign","","",70,[[["duration",3]]]],[11,"sub","","",70,[[["instant",3]],["duration",3]]],[11,"sub","","",70,[[["duration",3]],["instant",3]]],[11,"from","","",70,[[["instant",3]],["instant",3]]],[11,"poll","","",73,[[["context",3],["timeout",3],["pin",3]],["poll",4]]],[11,"poll","","",72,[[["sleep",3],["pin",3],["context",3]],["poll",4]]],[11,"fmt","","",73,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",71,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",70,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",72,[[["formatter",3]],[["error",3],["result",4]]]],[11,"cmp","","",70,[[["instant",3]],["ordering",4]]],[11,"eq","","",70,[[["instant",3]]]],[11,"ne","","",70,[[["instant",3]]]],[11,"clone","","",70,[[],["instant",3]]],[11,"add","","",70,[[["duration",3]],["instant",3]]],[11,"sub_assign","","",70,[[["duration",3]]]],[11,"partial_cmp","","",70,[[["instant",3]],[["ordering",4],["option",4]]]],[11,"lt","","",70,[[["instant",3]]]],[11,"le","","",70,[[["instant",3]]]],[11,"gt","","",70,[[["instant",3]]]],[11,"ge","","",70,[[["instant",3]]]],[11,"started","actix::actors::resolver","",19,[[]]],[11,"stop","actix","",5,[[]]],[11,"terminate","","",5,[[]]],[11,"state","","",5,[[],["actorstate",4]]],[11,"stop","actix::sync","Stop the current Actor. SyncContext will stop the existing…",39,[[]]],[11,"terminate","","Terminate the current Actor. SyncContext will terminate…",39,[[]]],[11,"state","","Get the Actor execution state.",39,[[],["actorstate",4]]],[11,"spawn","actix","",5,[[],["spawnhandle",3]]],[11,"wait","","",5,[[]]],[11,"waiting","","",5,[[]]],[11,"cancel_future","","",5,[[["spawnhandle",3]]]],[11,"address","","",5,[[],["addr",3]]],[11,"parts","","",5,[[],["contextparts",3]]],[11,"handle","actix::actors::mocker","",14,[[]]],[11,"handle","actix::actors::resolver","",19,[[["resolve",3]]]],[11,"handle","","",19,[[["connect",3]]]],[11,"handle","","",19,[[["connectaddr",3]]]],[11,"handle","actix","",6,[[["responsechannel",8],["option",4]]]],[11,"handle","","",0,[[["responsechannel",8],["option",4]]]],[11,"handle","","",10,[[["responsechannel",8],["option",4]]]],[11,"handle","","",86,[[["responsechannel",8],["option",4]]]],[11,"handle","","",87,[[["responsechannel",8],["option",4]]]],[11,"handle","","",7,[[["responsechannel",8],["option",4]]]],[11,"handle","","",8,[[["responsechannel",8],["option",4]]]],[11,"pack","","",5,[[["sender",3],["option",4]],["envelope",3]]],[11,"pack","actix::sync","",39,[[["syncsender",3],["option",4]],["envelope",3]]],[11,"handle","actix::dev","",66,[[]]],[11,"poll","actix::actors::resolver","",20,[[["pin",3],["context",3],["resolver",3],["context",3]],["poll",4]]],[11,"poll","actix::fut","",21,[[["context",3],["pin",3]],["poll",4]]],[11,"poll","","",74,[[["context",3],["pin",3]],["poll",4]]],[11,"poll","","",75,[[["context",3],["pin",3]],["poll",4]]],[11,"poll","","",76,[[["context",3],["pin",3]],["poll",4]]],[11,"poll","","",77,[[["context",3],["pin",3]],["poll",4]]],[11,"poll","","",78,[[["context",3],["pin",3]],["poll",4]]],[11,"poll","","",82,[[["context",3],["pin",3]],["poll",4]]],[11,"poll","","",83,[[["context",3],["pin",3]],["poll",4]]],[11,"poll","","",84,[[["context",3],["pin",3]],["poll",4]]],[11,"poll","actix::utils","",41,[[["context",3],["pin",3]],["poll",4]]],[11,"poll_next","actix::fut","",79,[[["context",3],["pin",3]],[["poll",4],["option",4]]]],[11,"poll_next","","",80,[[["context",3],["pin",3]],[["poll",4],["option",4]]]],[11,"poll_next","","",81,[[["context",3],["pin",3]],[["option",4],["poll",4]]]],[11,"poll_next","","",85,[[["context",3],["pin",3]],[["poll",4],["option",4]]]],[11,"poll_next","actix::utils","",42,[[["context",3],["pin",3]],[["poll",4],["option",4]]]],[11,"drop","actix::dev","",63,[[]]],[11,"drop","actix::dev::channel","",64,[[]]],[11,"drop","","",65,[[]]],[11,"drop","actix::io","",32,[[]]],[11,"from","actix::fut","",76,[[["result",4]]]],[11,"into","actix","",10,[[],["recipient",3]]],[11,"into","","",10,[[],["weakrecipient",3]]],[11,"into","","",11,[[],["weakrecipient",3]]],[11,"clone","","",1,[[],["actorstate",4]]],[11,"clone","","",2,[[],["running",4]]],[11,"clone","","",4,[[],["spawnhandle",3]]],[11,"clone","actix::dev::channel","",64,[[],["addresssender",3]]],[11,"clone","actix","",3,[[],["mailboxerror",4]]],[11,"clone","","",10,[[],["addr",3]]],[11,"clone","","",11,[[],["weakaddr",3]]],[11,"clone","","",12,[[],["recipient",3]]],[11,"clone","actix::registry","",36,[[],["registry",3]]],[11,"default","actix","",4,[[],["spawnhandle",3]]],[11,"default","actix::dev","",69,[[]]],[11,"default","actix::actors::mocker","",14,[[]]],[11,"default","actix::actors::resolver","",19,[[],["resolver",3]]],[11,"default","actix::utils","",40,[[]]],[11,"eq","actix","",1,[[["actorstate",4]]]],[11,"eq","","",2,[[["running",4]]]],[11,"eq","","",4,[[["spawnhandle",3]]]],[11,"ne","","",4,[[["spawnhandle",3]]]],[11,"eq","actix::dev::channel","",64,[[]]],[11,"eq","actix","",10,[[]]],[11,"eq","","",12,[[]]],[11,"eq","actix::actors::resolver","",15,[[["resolve",3]]]],[11,"ne","","",15,[[["resolve",3]]]],[11,"eq","","",16,[[["connect",3]]]],[11,"ne","","",16,[[["connect",3]]]],[11,"eq","","",17,[[["connectaddr",3]]]],[11,"ne","","",17,[[["connectaddr",3]]]],[11,"fmt","actix","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","actix::dev","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","actix","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","actix::dev::channel","",64,[[["formatter",3]],["result",6]]],[11,"fmt","actix","",3,[[["formatter",3]],["result",6]]],[11,"fmt","actix::prelude","",45,[[["formatter",3]],["result",6]]],[11,"fmt","actix","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","actix::dev","",69,[[["formatter",3]],["result",6]]],[11,"fmt","actix::actors::resolver","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","actix::fut","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",75,[[["formatter",3]],["result",6]]],[11,"fmt","","",76,[[["formatter",3]],["result",6]]],[11,"fmt","","",77,[[["formatter",3]],["result",6]]],[11,"fmt","","",78,[[["formatter",3]],["result",6]]],[11,"fmt","","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"fmt","","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",83,[[["formatter",3]],["result",6]]],[11,"fmt","actix::registry","",37,[[["formatter",3]],["result",6]]],[11,"fmt","actix","",3,[[["formatter",3]],["result",6]]],[11,"fmt","actix::prelude","",45,[[["formatter",3]],["result",6]]],[11,"fmt","actix::actors::resolver","",18,[[["formatter",3]],["result",6]]],[11,"hash","actix","",4,[[]]],[11,"hash","actix::dev::channel","",64,[[]]],[11,"hash","actix","",10,[[]]],[11,"hash","","",12,[[]]],[11,"poll","actix::prelude","",67,[[["context",3],["pin",3]],["poll",4]]],[11,"poll","","",68,[[["context",3],["pin",3]],["poll",4]]],[11,"poll","actix::fut","",24,[[["context",3],["pin",3]],["poll",4]]],[11,"poll_next","actix::dev::channel","",65,[[["context",3],["pin",3]],[["poll",4],["option",4]]]],[11,"new","actix::prelude","Spawn a new Arbiter thread and start its event loop.",59,[[],["arbiter",3]]],[11,"current","","Return a handle to the current thread\'s Arbiter\'s message…",59,[[],["arbiterhandle",3]]],[11,"stop","","Stop Arbiter from continuing it\'s event loop.",59,[[]]],[11,"spawn","","Send a future to the Arbiter\'s thread and spawn it.",59,[[]]],[11,"spawn_fn","","Send a function to the Arbiter\'s thread and execute it.",59,[[]]],[11,"join","","Wait for Arbiter\'s event loop to complete.",59,[[],[["box",3],["result",4]]]],[11,"new","","Create a new system.",60,[[],["systemrunner",3]]],[11,"current","","Get current running system.",60,[[],["system",3]]],[11,"arbiter","","Get handle to a the System\'s initial [Arbiter].",60,[[],["arbiterhandle",3]]],[11,"is_registered","","Check if there is a System registered on the current thread.",60,[[]]],[11,"id","","Numeric system identifier.",60,[[]]],[11,"stop","","Stop the system (with code 0).",60,[[]]],[11,"stop_with_code","","Stop the system with a given exit code.",60,[[]]],[11,"run","","Starts event loop and will return once [System] is stopped.",61,[[],[["error",3],["result",4]]]],[11,"block_on","","Runs the provided future, blocking the current thread…",61,[[]]],[11,"started","","Called when an actor gets polled the first time.",46,[[]]],[11,"stopping","","Called after an actor is in `Actor::Stopping` state.",46,[[],["running",4]]],[11,"stopped","","Called after an actor is stopped.",46,[[]]],[11,"start","","Start a new asynchronous actor, returning its address.",46,[[],["addr",3]]],[11,"start_default","","Construct and start a new asynchronous actor, returning…",46,[[],["addr",3]]],[11,"start_in_arbiter","","Start new actor in arbiter\'s thread.",46,[[["arbiterhandle",3]],["addr",3]]],[11,"create","","Start a new asynchronous actor given a `Context`.",46,[[],["addr",3]]],[11,"restarting","","Called when the supervisor restarts a failed actor.",49,[[]]],[11,"add_stream","","Registers a stream with the context.",48,[[],["spawnhandle",3]]],[11,"add_message_stream","","Registers a stream with the context, ignoring errors.",48,[[]]],[11,"notify","","Sends the message `msg` to self. This bypasses the mailbox…",48,[[]]],[11,"notify_later","","Sends the message `msg` to self after a specified period…",48,[[["duration",3]],["spawnhandle",3]]],[11,"run_later","","Executes a closure after a specified period of time.",48,[[["duration",3]],["spawnhandle",3]]],[11,"run_interval","","Spawns a job to execute the given closure periodically, at…",48,[[["duration",3]],["spawnhandle",3]]],[11,"new","actix::dev","Create new ContextParts instance",62,[[["addresssenderproducer",3]]]],[11,"stop","","Initiate stop process for actor execution",62,[[]]],[11,"terminate","","Terminate actor execution",62,[[]]],[11,"state","","Actor execution state",62,[[],["actorstate",4]]],[11,"waiting","","Is context waiting for future completion",62,[[]]],[11,"curr_handle","","Handle of the running future",62,[[],["spawnhandle",3]]],[11,"spawn","","Spawn new future to this context.",62,[[],["spawnhandle",3]]],[11,"wait","","Spawn new future to this context and wait future completion.",62,[[]]],[11,"cancel_future","","Cancel previously scheduled future.",62,[[["spawnhandle",3]]]],[11,"capacity","","",62,[[]]],[11,"set_mailbox_capacity","","",62,[[]]],[11,"address","","",62,[[],["addr",3]]],[11,"started","","",62,[[]]],[11,"connected","","Are any senders connected",62,[[]]],[11,"new","","",63,[[["mailbox",3]]]],[11,"ctx","","",63,[[]]],[11,"address","","",63,[[],["addr",3]]],[11,"alive","","",63,[[]]],[11,"started","actix::prelude","Method is called when stream get polled first time.",53,[[]]],[11,"finished","","Method is called when stream finishes.",53,[[]]],[11,"add_stream","","This method register stream to an actor context and allows…",53,[[],["spawnhandle",3]]],[11,"connected","actix::dev::channel","Is the channel still open",64,[[]]],[11,"send","","Attempts to send a message on this `Sender<A>` with…",64,[[],[["receiver",3],["senderror",4],["result",4]]]],[11,"try_send","","Attempts to send a message on this `Sender<A>` without…",64,[[],[["result",4],["senderror",4]]]],[11,"do_send","","Send a message on this `Sender<A>` without blocking.",64,[[],[["result",4],["senderror",4]]]],[11,"downgrade","","Downgrade to `WeakAddressSender` which can later be upgraded",64,[[],["weakaddresssender",3]]],[11,"connected","","Returns whether any senders are still connected.",65,[[]]],[11,"capacity","","Returns the channel capacity.",65,[[]]],[11,"set_capacity","","Sets the channel capacity.",65,[[]]],[11,"sender","","Returns the sender side of the channel.",65,[[],["addresssender",3]]],[11,"sender_producer","","Creates the sender producer.",65,[[],["addresssenderproducer",3]]],[11,"new","actix::dev","",66,[[["sender",3],["option",4]]]],[11,"with_proxy","","",66,[[["box",3],["envelopeproxy",8]]]],[11,"timeout","actix::prelude","Set message delivery timeout",67,[[["duration",3]]]],[11,"new","","",68,[[["option",4],["receiver",3],["option",4]],["recipientrequest",3]]],[11,"timeout","","Set message delivery timeout",68,[[["duration",3]]]],[11,"into_inner","","",45,[[]]],[11,"new","actix::dev","",69,[[["addressreceiver",3]]]],[11,"capacity","","",69,[[]]],[11,"set_capacity","","",69,[[]]],[11,"connected","","",69,[[]]],[11,"address","","",69,[[],["addr",3]]],[11,"sender_producer","","",69,[[],["addresssenderproducer",3]]],[11,"poll","","",69,[[["context",3]]]],[11,"now","actix::clock","Returns an instant corresponding to \\\"now\\\".",70,[[],["instant",3]]],[11,"from_std","","Create a `tokio::time::Instant` from a `std::time::Instant`.",70,[[["instant",3]],["instant",3]]],[11,"into_std","","Convert the value into a `std::time::Instant`.",70,[[],["instant",3]]],[11,"duration_since","","Returns the amount of time elapsed from another instant to…",70,[[["instant",3]],["duration",3]]],[11,"checked_duration_since","","Returns the amount of time elapsed from another instant to…",70,[[["instant",3]],[["duration",3],["option",4]]]],[11,"saturating_duration_since","","Returns the amount of time elapsed from another instant to…",70,[[["instant",3]],["duration",3]]],[11,"elapsed","","Returns the amount of time elapsed since this instant was…",70,[[],["duration",3]]],[11,"checked_add","","Returns `Some(t)` where `t` is the time `self + duration`…",70,[[["duration",3]],[["option",4],["instant",3]]]],[11,"checked_sub","","Returns `Some(t)` where `t` is the time `self - duration`…",70,[[["duration",3]],[["option",4],["instant",3]]]],[11,"tick","","Completes when the next instant in the interval has been…",71,[[]]],[11,"poll_tick","","Poll for the next instant in the interval to be reached.",71,[[["context",3]],[["poll",4],["instant",3]]]],[11,"deadline","","Returns the instant at which the future will complete.",72,[[],["instant",3]]],[11,"is_elapsed","","Returns `true` if `Sleep` has elapsed.",72,[[]]],[11,"reset","","Resets the `Sleep` instance to a new deadline.",72,[[["sleep",3],["pin",3],["instant",3]]]],[11,"get_ref","","Gets a reference to the underlying value in this timeout.",73,[[]]],[11,"get_mut","","Gets a mutable reference to the underlying value in this…",73,[[]]],[11,"into_inner","","Consumes this timeout, returning the underlying value.",73,[[]]]],"p":[[3,"MessageResult"],[4,"ActorState"],[4,"Running"],[4,"MailboxError"],[3,"SpawnHandle"],[3,"Context"],[3,"AtomicResponse"],[3,"Response"],[3,"ActorResponse"],[3,"Supervisor"],[3,"Addr"],[3,"WeakAddr"],[3,"Recipient"],[3,"WeakRecipient"],[3,"Mocker"],[3,"Resolve"],[3,"Connect"],[3,"ConnectAddr"],[4,"ResolverError"],[3,"Resolver"],[3,"TcpConnector"],[4,"Either"],[13,"Left"],[13,"Right"],[3,"Finish"],[8,"ActorFuture"],[8,"ActorStream"],[8,"IntoActorFuture"],[8,"WrapFuture"],[8,"WrapStream"],[8,"WriteHandler"],[3,"Writer"],[3,"FramedWrite"],[3,"SinkWrite"],[8,"ArbiterService"],[8,"SystemService"],[3,"Registry"],[3,"SystemRegistry"],[3,"SyncArbiter"],[3,"SyncContext"],[3,"Condition"],[3,"TimerFunc"],[3,"IntervalFunc"],[8,"Stream"],[8,"Future"],[4,"SendError"],[8,"Actor"],[8,"ActorContext"],[8,"AsyncContext"],[8,"Supervised"],[8,"ContextFutureSpawner"],[8,"Handler"],[8,"Message"],[8,"StreamHandler"],[8,"EnvelopeProxy"],[8,"ToEnvelope"],[8,"AsyncContextParts"],[8,"MessageResponse"],[8,"ResponseChannel"],[3,"Arbiter"],[3,"System"],[3,"SystemRunner"],[3,"ContextParts"],[3,"ContextFut"],[3,"AddressSender"],[3,"AddressReceiver"],[3,"Envelope"],[3,"Request"],[3,"RecipientRequest"],[3,"Mailbox"],[3,"Instant"],[3,"Interval"],[3,"Sleep"],[3,"Timeout"],[3,"Map"],[3,"Ready"],[3,"FutureResult"],[3,"StreamFinish"],[3,"StreamFold"],[3,"StreamMap"],[3,"StreamThen"],[3,"StreamTimeout"],[3,"Then"],[3,"Timeout"],[3,"FutureWrap"],[3,"StreamWrap"],[6,"ResponseActFuture"],[6,"ResponseFuture"]]},\
"actix_broker":{"doc":"A message broker for the Actix actor framework.","i":[[3,"ArbiterBroker","actix_broker","",null,null],[3,"Broker","","",null,null],[3,"SystemBroker","","",null,null],[11,"issue_async","","Send messages asynchronously via the broker. It can be…",0,[[["brokermsg",8]]]],[11,"issue_async","","Send messages asynchronously via the broker. It can be…",0,[[["brokermsg",8]]]],[8,"BrokerMsg","","",null,null],[8,"BrokerSubscribe","","The `BrokerSubscribe` trait has functions to register an…",null,null],[11,"subscribe_async","","Asynchronously subscribe to a message.",1,[[]]],[11,"subscribe_sync","","Synchronously subscribe to a message. This actor will do…",1,[[]]],[11,"subscribe_system_async","","Helper to asynchronously subscribe to a system broker This…",1,[[]]],[11,"subscribe_system_sync","","Helper to synchronously subscribe to a system broker This…",1,[[]]],[11,"subscribe_arbiter_async","","Helper to asynchronously subscribe to an arbiter-specific…",1,[[]]],[11,"subscribe_arbiter_sync","","Helper to synchronously subscribe to an arbiter-specific…",1,[[]]],[8,"BrokerIssue","","The `BrokerIssue` provides functions to issue messages to…",null,null],[11,"issue_async","","Asynchronously issue a message.",2,[[["brokermsg",8]]]],[11,"issue_sync","","Synchronously issue a message. This also causes the broker…",2,[[["brokermsg",8]]]],[11,"issue_system_async","","Helper to asynchronously issue to an system broker This is…",2,[[["brokermsg",8]]]],[11,"issue_system_sync","","Helper to synchronously issue to an system broker This is…",2,[[["brokermsg",8]]]],[11,"issue_arbiter_async","","Helper to asynchronously issue to an arbiter-specific…",2,[[["brokermsg",8]]]],[11,"issue_arbiter_sync","","Helper to synchronously issue to an arbiter-specific…",2,[[["brokermsg",8]]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"default","","",0,[[],["broker",3]]],[11,"default","","",4,[[],["systembroker",3]]],[11,"default","","",3,[[],["arbiterbroker",3]]],[11,"issue_async","","Asynchronously issue a message.",2,[[["brokermsg",8]]]],[11,"issue_sync","","Synchronously issue a message. This also causes the broker…",2,[[["brokermsg",8]]]],[11,"issue_system_async","","Helper to asynchronously issue to an system broker This is…",2,[[["brokermsg",8]]]],[11,"issue_system_sync","","Helper to synchronously issue to an system broker This is…",2,[[["brokermsg",8]]]],[11,"issue_arbiter_async","","Helper to asynchronously issue to an arbiter-specific…",2,[[["brokermsg",8]]]],[11,"issue_arbiter_sync","","Helper to synchronously issue to an arbiter-specific…",2,[[["brokermsg",8]]]],[11,"subscribe_async","","Asynchronously subscribe to a message.",1,[[]]],[11,"subscribe_sync","","Synchronously subscribe to a message. This actor will do…",1,[[]]],[11,"subscribe_system_async","","Helper to asynchronously subscribe to a system broker This…",1,[[]]],[11,"subscribe_system_sync","","Helper to synchronously subscribe to a system broker This…",1,[[]]],[11,"subscribe_arbiter_async","","Helper to asynchronously subscribe to an arbiter-specific…",1,[[]]],[11,"subscribe_arbiter_sync","","Helper to synchronously subscribe to an arbiter-specific…",1,[[]]]],"p":[[3,"Broker"],[8,"BrokerSubscribe"],[8,"BrokerIssue"],[3,"ArbiterBroker"],[3,"SystemBroker"]]},\
"actix_derive":{"doc":"","i":[[24,"Message","actix_derive","",null,null],[24,"MessageResponse","","",null,null],[23,"main","","Marks async function to be executed by Actix system.",null,null],[23,"test","","Marks async test function to be executed by Actix system.",null,null]],"p":[]},\
"client":{"doc":"","i":[[3,"ChatClient","client","",null,null],[12,"framed","","",0,null],[3,"ClientCommand","","",null,null],[12,"0","","",1,null],[5,"main","","",null,[[]]],[0,"codec","","",null,null],[3,"ChatCodec","client::codec","Codec for Client -> Server transport",null,null],[3,"ClientChatCodec","","Codec for Server -> Client transport",null,null],[4,"ChatRequest","","Client request",null,null],[13,"List","","List rooms",2,null],[13,"Join","","Join rooms",2,null],[13,"Message","","Send message",2,null],[13,"Ping","","Ping",2,null],[4,"ChatResponse","","Server response",null,null],[13,"Ping","","",3,null],[13,"Rooms","","List of rooms",3,null],[13,"Joined","","Joined",3,null],[13,"Message","","Message",3,null],[11,"hb","client","",0,[[["context",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","client::codec","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"started","client","",0,[[["context",3]]]],[11,"stopping","","",0,[[["context",3]],["running",4]]],[11,"handle","","",0,[[["clientcommand",3],["context",3]]]],[11,"handle","","",0,[[["error",3],["chatresponse",4],["result",4],["context",3]]]],[11,"encode","client::codec","",4,[[["bytesmut",3],["chatresponse",4]],["result",4]]],[11,"encode","","",5,[[["chatrequest",4],["bytesmut",3]],["result",4]]],[11,"decode","","",4,[[["bytesmut",3]],[["result",4],["option",4]]]],[11,"decode","","",5,[[["bytesmut",3]],[["result",4],["option",4]]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]]],"p":[[3,"ChatClient"],[3,"ClientCommand"],[4,"ChatRequest"],[4,"ChatResponse"],[3,"ChatCodec"],[3,"ClientChatCodec"]]},\
"server":{"doc":"","i":[[3,"Server","server","Define TCP server that will accept incoming TCP connection…",null,null],[12,"chat","","",0,null],[3,"TcpConnect","","",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[5,"main","","",null,[[]]],[0,"codec","","",null,null],[3,"ChatCodec","server::codec","Codec for Client -> Server transport",null,null],[3,"ClientChatCodec","","Codec for Server -> Client transport",null,null],[4,"ChatRequest","","Client request",null,null],[13,"List","","List rooms",2,null],[13,"Join","","Join rooms",2,null],[13,"Message","","Send message",2,null],[13,"Ping","","Ping",2,null],[4,"ChatResponse","","Server response",null,null],[13,"Ping","","",3,null],[13,"Rooms","","List of rooms",3,null],[13,"Joined","","Joined",3,null],[13,"Message","","Message",3,null],[0,"server","server","`ChatServer` is an actor. It maintains list of connection…",null,null],[3,"Connect","server::server","Message for chat server communications New chat session is…",null,null],[12,"addr","","",4,null],[3,"Disconnect","","Session is disconnected",null,null],[12,"id","","",5,null],[3,"Message","","Send message to specific room",null,null],[12,"id","","Id of the client session",6,null],[12,"msg","","Peer message",6,null],[12,"room","","Room name",6,null],[3,"ListRooms","","List of available rooms",null,null],[3,"Join","","Join room, if room does not exists create new one.",null,null],[12,"id","","Client id",7,null],[12,"name","","Room name",7,null],[3,"ChatServer","","`ChatServer` manages chat rooms and responsible for…",null,null],[12,"sessions","","",8,null],[12,"rooms","","",8,null],[11,"send_message","","Send message to all users in the room",8,[[]]],[0,"session","server","`ClientSession` is an actor, it manages peer TCP…",null,null],[3,"Message","server::session","Chat server sends this messages to session",null,null],[12,"0","","",9,null],[3,"ChatSession","","`ChatSession` actor is responsible for TCP peer…",null,null],[12,"id","","unique session id",10,null],[12,"addr","","this is address of chat server",10,null],[12,"hb","","Client must send ping at least once per 10 seconds,…",10,null],[12,"room","","joined room",10,null],[12,"framed","","Framed wrapper",10,null],[11,"new","","",10,[[["chatcodec",3],["writehalf",3],["chatserver",3],["framedwrite",3],["chatresponse",4],["addr",3]],["chatsession",3]]],[11,"hb","","helper method that sends ping to client every second.",10,[[["context",3]]]],[11,"from","server","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","server::codec","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","server::server","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","server::session","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"default","server::server","",8,[[],["chatserver",3]]],[11,"fmt","server::codec","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"started","server::session","",10,[[]]],[11,"stopping","","",10,[[],["running",4]]],[11,"handle","server::server","",8,[[["context",3],["connect",3]]]],[11,"handle","","",8,[[["disconnect",3],["context",3]]]],[11,"handle","","",8,[[["context",3],["message",3]]]],[11,"handle","","",8,[[["context",3],["listrooms",3]]]],[11,"handle","","",8,[[["context",3],["join",3]]]],[11,"handle","server::session","",10,[[["message",3]]]],[11,"handle","server","",0,[[["context",3],["tcpconnect",3]]]],[11,"handle","server::session","This is main event loop for client requests",10,[[["chatrequest",4],["error",3],["result",4]]]],[11,"encode","server::codec","",11,[[["bytesmut",3],["chatresponse",4]],["result",4]]],[11,"encode","","",12,[[["chatrequest",4],["bytesmut",3]],["result",4]]],[11,"decode","","",11,[[["bytesmut",3]],[["result",4],["option",4]]]],[11,"decode","","",12,[[["bytesmut",3]],[["result",4],["option",4]]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]]],"p":[[3,"Server"],[3,"TcpConnect"],[4,"ChatRequest"],[4,"ChatResponse"],[3,"Connect"],[3,"Disconnect"],[3,"Message"],[3,"Join"],[3,"ChatServer"],[3,"Message"],[3,"ChatSession"],[3,"ChatCodec"],[3,"ClientChatCodec"],[3,"ListRooms"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);