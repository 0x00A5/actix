(function() {var implementors = {};
implementors["actix"] = [{"text":"impl RefUnwindSafe for ActorState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Running","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpawnHandle","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !RefUnwindSafe for Context&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !RefUnwindSafe for ContextParts&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, C&gt; !RefUnwindSafe for ContextFut&lt;A, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; RefUnwindSafe for MessageResult&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as Message&gt;::Result: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; !RefUnwindSafe for AtomicResponse&lt;A, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !RefUnwindSafe for Response&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, I&gt; !RefUnwindSafe for ActorResponse&lt;A, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !RefUnwindSafe for Supervisor&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !RefUnwindSafe for AddressSender&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !RefUnwindSafe for AddressReceiver&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !RefUnwindSafe for Envelope&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MailboxError","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !RefUnwindSafe for Addr&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !RefUnwindSafe for WeakAddr&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; !RefUnwindSafe for Recipient&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; !RefUnwindSafe for WeakRecipient&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !RefUnwindSafe for Mailbox&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Mocker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Resolve","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Connect","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConnectAddr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ResolverError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Resolver","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TcpConnector","synthetic":true,"types":[]},{"text":"impl&lt;Fut, Fn&gt; RefUnwindSafe for Map&lt;Fut, Fn&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fn: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, Fn&gt; RefUnwindSafe for Then&lt;A, B, Fn&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fn: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !RefUnwindSafe for Timeout&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F, A&gt; RefUnwindSafe for FutureWrap&lt;F, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, C&gt; RefUnwindSafe for Collect&lt;S, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Finish&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, Fut, T&gt; RefUnwindSafe for Fold&lt;S, F, Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for Map&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, I, Fn, Fut&gt; RefUnwindSafe for SkipWhile&lt;S, I, Fn, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fn: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, I, Fut, Fn&gt; RefUnwindSafe for TakeWhile&lt;S, I, Fut, Fn&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fn: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, Fn, F&gt; RefUnwindSafe for Then&lt;S, Fn, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fn: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for Timeout&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, A&gt; RefUnwindSafe for StreamWrap&lt;S, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !RefUnwindSafe for Writer&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, T, U&gt; !RefUnwindSafe for FramedWrite&lt;I, T, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, S&gt; !RefUnwindSafe for SinkWrite&lt;I, S&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Registry","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SystemRegistry","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !RefUnwindSafe for SyncArbiter&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !RefUnwindSafe for SyncContext&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Condition&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !RefUnwindSafe for TimerFunc&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !RefUnwindSafe for IntervalFunc&lt;A&gt;","synthetic":true,"types":[]}];
implementors["actix_broker"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for Broker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SystemBroker","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArbiterBroker","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()