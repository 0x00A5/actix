(function() {var implementors = {};
implementors["actix"] = [{"text":"impl Debug for ActorState","synthetic":false,"types":[]},{"text":"impl Debug for Running","synthetic":false,"types":[]},{"text":"impl Debug for SpawnHandle","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Actor&lt;Context = Context&lt;A&gt;&gt;&gt; Debug for Context&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A&gt; Debug for ContextParts&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Actor,<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Context: AsyncContext&lt;A&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A, C&gt; Debug for ContextFut&lt;A, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: AsyncContextParts&lt;A&gt; + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Actor&lt;Context = C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I&gt; Debug for Response&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A, I&gt; Debug for ActorResponse&lt;A, I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Debug&gt; Debug for Supervisor&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Supervised + Actor&lt;Context = Context&lt;A&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Actor&gt; Debug for AddressSender&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Debug for MailboxError","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Debug + Actor&gt; Debug for Addr&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Debug + Actor&gt; Debug for WeakAddr&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M&gt; Debug for Recipient&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Message + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;M::Result: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;M&gt; Debug for WeakRecipient&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Message + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;M::Result: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A&gt; Debug for Mailbox&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Actor,<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Context: AsyncContext&lt;A&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Debug for Resolve","synthetic":false,"types":[]},{"text":"impl Debug for Connect","synthetic":false,"types":[]},{"text":"impl Debug for ConnectAddr","synthetic":false,"types":[]},{"text":"impl Debug for ResolverError","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Debug, B:&nbsp;Debug&gt; Debug for Either&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Debug&gt; Debug for Finish&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Debug, F:&nbsp;Debug&gt; Debug for Map&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: ActorFuture,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug, A:&nbsp;Debug&gt; Debug for Ready&lt;T, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug, E:&nbsp;Debug, A:&nbsp;Debug&gt; Debug for FutureResult&lt;T, E, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Debug + ActorStream + Unpin&gt; Debug for StreamFinish&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Debug, F:&nbsp;Debug, Fut:&nbsp;Debug, T:&nbsp;Debug&gt; Debug for StreamFold&lt;S, F, Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: IntoActorFuture,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut::Future: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Debug, F:&nbsp;Debug&gt; Debug for StreamMap&lt;S, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Debug, F:&nbsp;Debug + 'static, U:&nbsp;Debug&gt; Debug for StreamThen&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: IntoActorFuture,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ActorStream,<br>&nbsp;&nbsp;&nbsp;&nbsp;U::Future: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Debug&gt; Debug for StreamTimeout&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ActorStream + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Debug, B:&nbsp;Debug, F:&nbsp;Debug + 'static&gt; Debug for Then&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: ActorFuture,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: IntoActorFuture&lt;Actor = A::Actor&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B::Future: Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Debug&gt; Debug for Timeout&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: ActorFuture,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Debug for SystemRegistry","synthetic":false,"types":[]}];
implementors["client"] = [{"text":"impl Debug for ChatRequest","synthetic":false,"types":[]},{"text":"impl Debug for ChatResponse","synthetic":false,"types":[]}];
implementors["server"] = [{"text":"impl Debug for ChatRequest","synthetic":false,"types":[]},{"text":"impl Debug for ChatResponse","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()