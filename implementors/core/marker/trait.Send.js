(function() {var implementors = {};
implementors["actix"] = [{"text":"impl Send for SpawnHandle","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Addr&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Send for Recipient&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for WeakAddr&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Send for Context&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, I, E&gt; !Send for ActorResponse&lt;A, I, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; !Send for AtomicResponse&lt;A, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Send for MessageResult&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as Message&gt;::Result: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; !Send for Response&lt;I, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Send for Supervisor&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl Send for ActorState","synthetic":true,"types":[]},{"text":"impl Send for Running","synthetic":true,"types":[]},{"text":"impl Send for MailboxError","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Send for ContextParts&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, C&gt; !Send for ContextFut&lt;A, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for AddressSender&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for AddressReceiver&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Envelope&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, M&gt; Send for Request&lt;A, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as Message&gt;::Result: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Send for RecipientRequest&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Mailbox&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for Mocker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Resolve","synthetic":true,"types":[]},{"text":"impl Send for Connect","synthetic":true,"types":[]},{"text":"impl Send for ConnectAddr","synthetic":true,"types":[]},{"text":"impl Send for Resolver","synthetic":true,"types":[]},{"text":"impl !Send for TcpConnector","synthetic":true,"types":[]},{"text":"impl Send for ResolverError","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Finish&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Send for Map&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, A&gt; Send for Ready&lt;T, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E, A&gt; Send for FutureResult&lt;T, E, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for StreamFinish&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, Fut, T&gt; Send for StreamFold&lt;S, F, Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as IntoActorFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for StreamMap&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, U&gt; Send for StreamThen&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as IntoActorFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for StreamTimeout&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, F&gt; Send for Then&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as IntoActorFuture&gt;::Future: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Timeout&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, A&gt; Send for FutureWrap&lt;F, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, A&gt; Send for StreamWrap&lt;S, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !Send for Writer&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, T, U&gt; !Send for FramedWrite&lt;I, T, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, S&gt; !Send for SinkWrite&lt;I, S&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Registry","synthetic":true,"types":[]},{"text":"impl Send for SystemRegistry","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for SyncArbiter&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Send for SyncContext&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Condition&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Send for TimerFunc&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Send for IntervalFunc&lt;A&gt;","synthetic":true,"types":[]}];
implementors["client"] = [{"text":"impl !Send for ChatClient","synthetic":true,"types":[]},{"text":"impl Send for ClientCommand","synthetic":true,"types":[]},{"text":"impl Send for ChatCodec","synthetic":true,"types":[]},{"text":"impl Send for ClientChatCodec","synthetic":true,"types":[]},{"text":"impl Send for ChatRequest","synthetic":true,"types":[]},{"text":"impl Send for ChatResponse","synthetic":true,"types":[]}];
implementors["server"] = [{"text":"impl Send for Server","synthetic":true,"types":[]},{"text":"impl Send for TcpConnect","synthetic":true,"types":[]},{"text":"impl Send for ChatCodec","synthetic":true,"types":[]},{"text":"impl Send for ClientChatCodec","synthetic":true,"types":[]},{"text":"impl Send for ChatRequest","synthetic":true,"types":[]},{"text":"impl Send for ChatResponse","synthetic":true,"types":[]},{"text":"impl Send for Connect","synthetic":true,"types":[]},{"text":"impl Send for Disconnect","synthetic":true,"types":[]},{"text":"impl Send for Message","synthetic":true,"types":[]},{"text":"impl Send for ListRooms","synthetic":true,"types":[]},{"text":"impl Send for Join","synthetic":true,"types":[]},{"text":"impl Send for ChatServer","synthetic":true,"types":[]},{"text":"impl Send for Message","synthetic":true,"types":[]},{"text":"impl !Send for ChatSession","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()