(function() {var implementors = {};
implementors["actix"] = [{"text":"impl&lt;A&gt; UnsafeUnpin for Supervisor&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Supervised + Actor&lt;Context = Context&lt;A&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A, M&gt; UnsafeUnpin for Request&lt;A, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Handler&lt;M&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Context: ToEnvelope&lt;A, M&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Message,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;M&gt; UnsafeUnpin for RecipientRequest&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Message + Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;M::Result: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A, B&gt; UnsafeUnpin for Either&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S&gt; UnsafeUnpin for Finish&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A, F&gt; UnsafeUnpin for Map&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: ActorFuture,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, E, A&gt; UnsafeUnpin for FutureResult&lt;T, E, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S, F, Fut, T&gt; UnsafeUnpin for StreamFold&lt;S, F, Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: IntoActorFuture,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, F&gt; UnsafeUnpin for StreamMap&lt;S, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S, F:&nbsp;'static, U&gt; UnsafeUnpin for StreamThen&lt;S, F, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: IntoActorFuture,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: ActorStream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A, B, F:&nbsp;'static&gt; UnsafeUnpin for Then&lt;A, B, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: ActorFuture,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: IntoActorFuture&lt;Actor = A::Actor&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F&gt; UnsafeUnpin for Timeout&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: ActorFuture,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F, A&gt; UnsafeUnpin for FutureWrap&lt;F, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, A&gt; UnsafeUnpin for StreamWrap&lt;S, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Stream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A&gt; UnsafeUnpin for SyncArbiter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Actor&lt;Context = SyncContext&lt;A&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()